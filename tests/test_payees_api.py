# coding: utf-8

"""
    Velo Payments APIs

    ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response.   # noqa: E501

    The version of the OpenAPI document: 2.35.58
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import os
import unittest

import velo_payments
from velo_payments.api.payees_api import PayeesApi  # noqa: E501
from velo_payments.rest import ApiException


class TestPayeesApi(unittest.TestCase):
    """PayeesApi unit test stubs"""

    def setUp(self):
        self.api = velo_payments.api.payees_api.PayeesApi()  # noqa: E501

        if os.environ.get('APITOKEN') == "":
            configuration = velo_payments.Configuration()
            # Configure HTTP basic authorization: basicAuth
            configuration.username = os.environ.get('KEY')
            configuration.password = os.environ.get('SECRET')

            # Defining host is optional and default to https://api.sandbox.velopayments.com
            configuration.host = os.environ.get('APIURL')
            # Create an instance of the API class
            api_instance = velo_payments.LoginApi(velo_payments.ApiClient(configuration))
            grant_type = 'client_credentials' # str | OAuth grant type. Should use 'client_credentials' (optional) (default to 'client_credentials')

            try:
                # Authentication endpoint
                api_response = api_instance.velo_auth(grant_type=grant_type)
                os.environ["APITOKEN"] = api_response.access_token
                
            except ApiException as e:
                print("Exception when calling LoginApi->velo_auth: %s\n" % e)

    def tearDown(self):
        pass

    def test_delete_payee_by_id_v3(self):
        """Test case for delete_payee_by_id_v3

        Delete Payee by Id  # noqa: E501
        """
        pass

    def test_delete_payee_by_id_v4(self):
        """Test case for delete_payee_by_id_v4

        Delete Payee by Id  # noqa: E501
        """
        pass

    def test_get_payee_by_id_v3(self):
        """Test case for get_payee_by_id_v3

        Get Payee by Id  # noqa: E501
        """
        pass

    def test_get_payee_by_id_v4(self):
        """Test case for get_payee_by_id_v4

        Get Payee by Id  # noqa: E501
        """
        pass

    def test_list_payee_changes_v3(self):
        """Test case for list_payee_changes_v3

        List Payee Changes  # noqa: E501
        """
        configuration = velo_payments.Configuration()
        configuration.access_token = os.environ["APITOKEN"]
        configuration.host = os.environ.get('APIURL')
        api_instance = velo_payments.PayeesApi(velo_payments.ApiClient(configuration))

        payor_id = os.environ["PAYOR"] # str | 
        updated_since = '2013-10-20T19:20:30+01:00' # datetime | The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm
        page = 1 # int | Page number. Default is 1. (optional) (default to 1)
        page_size = 100 # int | Page size. Default is 100. Max allowable is 1000. (optional) (default to 100)

        api_response = api_instance.list_payee_changes_v3(payor_id, updated_since, page=page, page_size=page_size)

    def test_list_payee_changes_v4(self):
        """Test case for list_payee_changes_v4

        List Payee Changes  # noqa: E501
        """
        pass

    def test_list_payees_v3(self):
        """Test case for list_payees_v3

        List Payees  # noqa: E501
        """
        configuration = velo_payments.Configuration()
        configuration.access_token = os.environ["APITOKEN"]
        configuration.host = os.environ.get('APIURL')
        api_instance = velo_payments.PayeesApi(velo_payments.ApiClient(configuration))

        payor_id = os.environ["PAYOR"] # str | 
        disabled = False # bool | Payee disabled (optional)
        payee_country = 'US' # str | The country of the payee - 2 letter ISO 3166-1 country code (upper case) (optional)
        page = 1 # int | Page number. Default is 1. (optional) (default to 1)
        page_size = 25 # int | Page size. Default is 25. Max allowable is 100. (optional) (default to 25)
        sort = 'displayName:asc' # str | List of sort fields (e.g. ?sort=onboardedStatus:asc,name:asc) Default is name:asc 'name' is treated as company name for companies - last name + ',' + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.  (optional) (default to 'displayName:asc')

        api_response = api_instance.list_payees_v3(payor_id, disabled=disabled, payee_country=payee_country, page=page, page_size=page_size, sort=sort)

    def test_list_payees_v4(self):
        """Test case for list_payees_v4

        List Payees  # noqa: E501
        """
        pass

    def test_payee_details_update_v3(self):
        """Test case for payee_details_update_v3

        Update Payee Details  # noqa: E501
        """
        pass

    def test_payee_details_update_v4(self):
        """Test case for payee_details_update_v4

        Update Payee Details  # noqa: E501
        """
        pass

    def test_v3_payees_payee_id_remote_id_update_post(self):
        """Test case for v3_payees_payee_id_remote_id_update_post

        Update Payee Remote Id  # noqa: E501
        """
        pass

    def test_v4_payees_payee_id_remote_id_update_post(self):
        """Test case for v4_payees_payee_id_remote_id_update_post

        Update Payee Remote Id  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
