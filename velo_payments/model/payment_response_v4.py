"""
    Velo Payments APIs

    ## Terms and Definitions  Throughout this document and the Velo platform the following terms are used:  * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout. * **Payee.** The recipient of funds paid out by a payor. * **Payment.** A single transfer of funds from a payor to a payee. * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee. * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.  ## Overview  The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:  * Authenticate with the Velo platform * Maintain a collection of payees * Query the payor’s current balance of funds within the platform and perform additional funding * Issue payments to payees * Query the platform for a history of those payments  This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.  ## API Considerations  The Velo Payments API is REST based and uses the JSON format for requests and responses.  Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.  Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).  Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.  ## Authenticating with the Velo Platform  Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.  You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:  create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529  base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==  perform the Velo authentication REST call using the HTTP header created above e.g. via curl:  ```   curl -X POST \\   -H \"Content-Type: application/json\" \\   -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" \\   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials' ```  If successful, this call will result in a **200** HTTP status code and a response body such as:  ```   {     \"access_token\":\"19f6bafd-93fd-4747-b229-00507bbc991f\",     \"token_type\":\"bearer\",     \"expires_in\":1799,     \"scope\":\"...\"   } ``` ## API access following authentication Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.  This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:  ```   -H \"Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f \" ```  If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response.   # noqa: E501

    The version of the OpenAPI document: 2.29.128
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from velo_payments.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from velo_payments.exceptions import ApiAttributeError


def lazy_import():
    from velo_payments.model.payment_audit_currency import PaymentAuditCurrency
    from velo_payments.model.payment_event_response import PaymentEventResponse
    from velo_payments.model.payment_response_v4_payout import PaymentResponseV4Payout
    from velo_payments.model.payout_schedule import PayoutSchedule
    globals()['PaymentAuditCurrency'] = PaymentAuditCurrency
    globals()['PaymentEventResponse'] = PaymentEventResponse
    globals()['PaymentResponseV4Payout'] = PaymentResponseV4Payout
    globals()['PayoutSchedule'] = PayoutSchedule


class PaymentResponseV4(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('status',): {
            'ACCEPTED': "ACCEPTED",
            'AWAITING_FUNDS': "AWAITING_FUNDS",
            'FUNDED': "FUNDED",
            'UNFUNDED': "UNFUNDED",
            'BANK_PAYMENT_REQUESTED': "BANK_PAYMENT_REQUESTED",
            'REJECTED': "REJECTED",
            'ACCEPTED_BY_RAILS': "ACCEPTED_BY_RAILS",
            'CONFIRMED': "CONFIRMED",
            'RETURNED': "RETURNED",
            'WITHDRAWN': "WITHDRAWN",
        },
        ('funding_status',): {
            'FUNDED': "FUNDED",
            'INSTRUCTED': "INSTRUCTED",
            'UNFUNDED': "UNFUNDED",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'payment_id': (str,),  # noqa: E501
            'payee_id': (str,),  # noqa: E501
            'payor_id': (str,),  # noqa: E501
            'quote_id': (str,),  # noqa: E501
            'source_account_id': (str,),  # noqa: E501
            'payment_amount': (int,),  # noqa: E501
            'submitted_date_time': (datetime,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'funding_status': (str,),  # noqa: E501
            'rails_id': (str,),  # noqa: E501
            'events': ([PaymentEventResponse],),  # noqa: E501
            'payor_name': (str,),  # noqa: E501
            'source_account_name': (str,),  # noqa: E501
            'remote_id': (str,),  # noqa: E501
            'remote_system_id': (str,),  # noqa: E501
            'remote_system_payment_id': (str,),  # noqa: E501
            'source_amount': (int,),  # noqa: E501
            'source_currency': (PaymentAuditCurrency,),  # noqa: E501
            'payment_currency': (PaymentAuditCurrency,),  # noqa: E501
            'rate': (float,),  # noqa: E501
            'inverted_rate': (float,),  # noqa: E501
            'is_payment_ccy_base_ccy': (bool,),  # noqa: E501
            'routing_number': (str,),  # noqa: E501
            'account_number': (str,),  # noqa: E501
            'iban': (str,),  # noqa: E501
            'payment_memo': (str,),  # noqa: E501
            'filename_reference': (str,),  # noqa: E501
            'individual_identification_number': (str,),  # noqa: E501
            'trace_number': (str,),  # noqa: E501
            'payor_payment_id': (str,),  # noqa: E501
            'payment_channel_id': (str,),  # noqa: E501
            'payment_channel_name': (str,),  # noqa: E501
            'account_name': (str,),  # noqa: E501
            'country_code': (str,),  # noqa: E501
            'return_cost': (int,),  # noqa: E501
            'return_reason': (str,),  # noqa: E501
            'rails_payment_id': (str,),  # noqa: E501
            'rails_batch_id': (str,),  # noqa: E501
            'rejection_reason': (str,),  # noqa: E501
            'withdrawn_reason': (str,),  # noqa: E501
            'withdrawable': (bool,),  # noqa: E501
            'auto_withdrawn_reason_code': (str,),  # noqa: E501
            'transmission_type': (str,),  # noqa: E501
            'payment_tracking_reference': (str,),  # noqa: E501
            'payment_metadata': (str,),  # noqa: E501
            'schedule': (PayoutSchedule,),  # noqa: E501
            'payout': (PaymentResponseV4Payout,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'payment_id': 'paymentId',  # noqa: E501
        'payee_id': 'payeeId',  # noqa: E501
        'payor_id': 'payorId',  # noqa: E501
        'quote_id': 'quoteId',  # noqa: E501
        'source_account_id': 'sourceAccountId',  # noqa: E501
        'payment_amount': 'paymentAmount',  # noqa: E501
        'submitted_date_time': 'submittedDateTime',  # noqa: E501
        'status': 'status',  # noqa: E501
        'funding_status': 'fundingStatus',  # noqa: E501
        'rails_id': 'railsId',  # noqa: E501
        'events': 'events',  # noqa: E501
        'payor_name': 'payorName',  # noqa: E501
        'source_account_name': 'sourceAccountName',  # noqa: E501
        'remote_id': 'remoteId',  # noqa: E501
        'remote_system_id': 'remoteSystemId',  # noqa: E501
        'remote_system_payment_id': 'remoteSystemPaymentId',  # noqa: E501
        'source_amount': 'sourceAmount',  # noqa: E501
        'source_currency': 'sourceCurrency',  # noqa: E501
        'payment_currency': 'paymentCurrency',  # noqa: E501
        'rate': 'rate',  # noqa: E501
        'inverted_rate': 'invertedRate',  # noqa: E501
        'is_payment_ccy_base_ccy': 'isPaymentCcyBaseCcy',  # noqa: E501
        'routing_number': 'routingNumber',  # noqa: E501
        'account_number': 'accountNumber',  # noqa: E501
        'iban': 'iban',  # noqa: E501
        'payment_memo': 'paymentMemo',  # noqa: E501
        'filename_reference': 'filenameReference',  # noqa: E501
        'individual_identification_number': 'individualIdentificationNumber',  # noqa: E501
        'trace_number': 'traceNumber',  # noqa: E501
        'payor_payment_id': 'payorPaymentId',  # noqa: E501
        'payment_channel_id': 'paymentChannelId',  # noqa: E501
        'payment_channel_name': 'paymentChannelName',  # noqa: E501
        'account_name': 'accountName',  # noqa: E501
        'country_code': 'countryCode',  # noqa: E501
        'return_cost': 'returnCost',  # noqa: E501
        'return_reason': 'returnReason',  # noqa: E501
        'rails_payment_id': 'railsPaymentId',  # noqa: E501
        'rails_batch_id': 'railsBatchId',  # noqa: E501
        'rejection_reason': 'rejectionReason',  # noqa: E501
        'withdrawn_reason': 'withdrawnReason',  # noqa: E501
        'withdrawable': 'withdrawable',  # noqa: E501
        'auto_withdrawn_reason_code': 'autoWithdrawnReasonCode',  # noqa: E501
        'transmission_type': 'transmissionType',  # noqa: E501
        'payment_tracking_reference': 'paymentTrackingReference',  # noqa: E501
        'payment_metadata': 'paymentMetadata',  # noqa: E501
        'schedule': 'schedule',  # noqa: E501
        'payout': 'payout',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, payment_id, payee_id, payor_id, quote_id, source_account_id, payment_amount, submitted_date_time, status, funding_status, events, *args, **kwargs):  # noqa: E501
        """PaymentResponseV4 - a model defined in OpenAPI

        Args:
            payment_id (str): The id of the payment
            payee_id (str): The id of the paymeee
            payor_id (str): The id of the payor
            quote_id (str): The quote Id used for the FX
            source_account_id (str): The id of the source account from which the payment was taken
            payment_amount (int): The amount which the payee will receive
            submitted_date_time (datetime):
            status (str):
            funding_status (str): The funding status of the payment
            events ([PaymentEventResponse]):

        Keyword Args:
            rails_id (str): The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.. defaults to "RAILS ID UNAVAILABLE"  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            payor_name (str): The name of the payor. [optional]  # noqa: E501
            source_account_name (str): The name of the source account from which the payment was taken. [optional]  # noqa: E501
            remote_id (str): The remote id by which the payor refers to the payee. Only populated once payment is confirmed. [optional]  # noqa: E501
            remote_system_id (str): The velo id of the remote system orchestrating the payment. Not populated for normal Velo payments.. [optional]  # noqa: E501
            remote_system_payment_id (str): The id of the payment in the remote system. Not populated for normal Velo payments.. [optional]  # noqa: E501
            source_amount (int): The source amount for the payment (amount debited to make the payment). [optional]  # noqa: E501
            source_currency (PaymentAuditCurrency): [optional]  # noqa: E501
            payment_currency (PaymentAuditCurrency): [optional]  # noqa: E501
            rate (float): The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed. [optional]  # noqa: E501
            inverted_rate (float): The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed. [optional]  # noqa: E501
            is_payment_ccy_base_ccy (bool): [optional]  # noqa: E501
            routing_number (str): The routing number for the payment.. [optional]  # noqa: E501
            account_number (str): The account number for the account which will receive the payment.. [optional]  # noqa: E501
            iban (str): The iban for the payment.. [optional]  # noqa: E501
            payment_memo (str): The payment memo set by the payor. [optional]  # noqa: E501
            filename_reference (str): ACH file payment was submitted in, if applicable. [optional]  # noqa: E501
            individual_identification_number (str): Individual Identification Number assigned to the payment in the ACH file, if applicable. [optional]  # noqa: E501
            trace_number (str): Trace Number assigned to the payment in the ACH file, if applicable. [optional]  # noqa: E501
            payor_payment_id (str): [optional]  # noqa: E501
            payment_channel_id (str): [optional]  # noqa: E501
            payment_channel_name (str): [optional]  # noqa: E501
            account_name (str): [optional]  # noqa: E501
            country_code (str): The country code of the payment channel.. [optional]  # noqa: E501
            return_cost (int): The return cost if a returned payment.. [optional]  # noqa: E501
            return_reason (str): [optional]  # noqa: E501
            rails_payment_id (str): [optional]  # noqa: E501
            rails_batch_id (str): [optional]  # noqa: E501
            rejection_reason (str): [optional]  # noqa: E501
            withdrawn_reason (str): [optional]  # noqa: E501
            withdrawable (bool): [optional]  # noqa: E501
            auto_withdrawn_reason_code (str): Populated with rejection reason code if the payment was withdrawn automatically at instruct time. [optional]  # noqa: E501
            transmission_type (str): The transmission type of the payment, e.g. ACH, SAME_DAY_ACH, WIRE. [optional]  # noqa: E501
            payment_tracking_reference (str): [optional]  # noqa: E501
            payment_metadata (str): Metadata for the payment. [optional]  # noqa: E501
            schedule (PayoutSchedule): [optional]  # noqa: E501
            payout (PaymentResponseV4Payout): [optional]  # noqa: E501
        """

        rails_id = kwargs.get('rails_id', "RAILS ID UNAVAILABLE")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.payment_id = payment_id
        self.payee_id = payee_id
        self.payor_id = payor_id
        self.quote_id = quote_id
        self.source_account_id = source_account_id
        self.payment_amount = payment_amount
        self.submitted_date_time = submitted_date_time
        self.status = status
        self.funding_status = funding_status
        self.rails_id = rails_id
        self.events = events
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, payment_id, payee_id, payor_id, quote_id, source_account_id, payment_amount, submitted_date_time, status, funding_status, events, *args, **kwargs):  # noqa: E501
        """PaymentResponseV4 - a model defined in OpenAPI

        Args:
            payment_id (str): The id of the payment
            payee_id (str): The id of the paymeee
            payor_id (str): The id of the payor
            quote_id (str): The quote Id used for the FX
            source_account_id (str): The id of the source account from which the payment was taken
            payment_amount (int): The amount which the payee will receive
            submitted_date_time (datetime):
            status (str):
            funding_status (str): The funding status of the payment
            events ([PaymentEventResponse]):

        Keyword Args:
            rails_id (str): The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.. defaults to "RAILS ID UNAVAILABLE"  # noqa: E501
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            payor_name (str): The name of the payor. [optional]  # noqa: E501
            source_account_name (str): The name of the source account from which the payment was taken. [optional]  # noqa: E501
            remote_id (str): The remote id by which the payor refers to the payee. Only populated once payment is confirmed. [optional]  # noqa: E501
            remote_system_id (str): The velo id of the remote system orchestrating the payment. Not populated for normal Velo payments.. [optional]  # noqa: E501
            remote_system_payment_id (str): The id of the payment in the remote system. Not populated for normal Velo payments.. [optional]  # noqa: E501
            source_amount (int): The source amount for the payment (amount debited to make the payment). [optional]  # noqa: E501
            source_currency (PaymentAuditCurrency): [optional]  # noqa: E501
            payment_currency (PaymentAuditCurrency): [optional]  # noqa: E501
            rate (float): The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed. [optional]  # noqa: E501
            inverted_rate (float): The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed. [optional]  # noqa: E501
            is_payment_ccy_base_ccy (bool): [optional]  # noqa: E501
            routing_number (str): The routing number for the payment.. [optional]  # noqa: E501
            account_number (str): The account number for the account which will receive the payment.. [optional]  # noqa: E501
            iban (str): The iban for the payment.. [optional]  # noqa: E501
            payment_memo (str): The payment memo set by the payor. [optional]  # noqa: E501
            filename_reference (str): ACH file payment was submitted in, if applicable. [optional]  # noqa: E501
            individual_identification_number (str): Individual Identification Number assigned to the payment in the ACH file, if applicable. [optional]  # noqa: E501
            trace_number (str): Trace Number assigned to the payment in the ACH file, if applicable. [optional]  # noqa: E501
            payor_payment_id (str): [optional]  # noqa: E501
            payment_channel_id (str): [optional]  # noqa: E501
            payment_channel_name (str): [optional]  # noqa: E501
            account_name (str): [optional]  # noqa: E501
            country_code (str): The country code of the payment channel.. [optional]  # noqa: E501
            return_cost (int): The return cost if a returned payment.. [optional]  # noqa: E501
            return_reason (str): [optional]  # noqa: E501
            rails_payment_id (str): [optional]  # noqa: E501
            rails_batch_id (str): [optional]  # noqa: E501
            rejection_reason (str): [optional]  # noqa: E501
            withdrawn_reason (str): [optional]  # noqa: E501
            withdrawable (bool): [optional]  # noqa: E501
            auto_withdrawn_reason_code (str): Populated with rejection reason code if the payment was withdrawn automatically at instruct time. [optional]  # noqa: E501
            transmission_type (str): The transmission type of the payment, e.g. ACH, SAME_DAY_ACH, WIRE. [optional]  # noqa: E501
            payment_tracking_reference (str): [optional]  # noqa: E501
            payment_metadata (str): Metadata for the payment. [optional]  # noqa: E501
            schedule (PayoutSchedule): [optional]  # noqa: E501
            payout (PaymentResponseV4Payout): [optional]  # noqa: E501
        """

        rails_id = kwargs.get('rails_id', "RAILS ID UNAVAILABLE")
        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.payment_id = payment_id
        self.payee_id = payee_id
        self.payor_id = payor_id
        self.quote_id = quote_id
        self.source_account_id = source_account_id
        self.payment_amount = payment_amount
        self.submitted_date_time = submitted_date_time
        self.status = status
        self.funding_status = funding_status
        self.rails_id = rails_id
        self.events = events
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
